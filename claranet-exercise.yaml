AWSTemplateFormatVersion: 2010-09-09

# Description: Crea un bucket S3

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  AcmCertificate:
    Description: The ARN of the AWS Certification Manager's Certificate 
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t3.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:
  RegionMap:
    us-east-1:
     AMI: ami-0557a15b87f6559cf
    us-west-2:
     "AMI": "ami-09cd747c78a9add63"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16 
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LUIT CF Project

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LUIT CF Project

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: LUIT CF Project Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs  '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: LUIT CF Project Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs  '']
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: LUIT CF Project Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs  '']
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: LUIT CF Project Private Subnet (AZ2)
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LUIT CF Project Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 200
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: MyLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref MySecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  MyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: ami-09cd747c78a9add63
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref MySecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt remove needrestart -y
          sudo su
          cd ~
          apt update -y && apt upgrade -y
          apt install apache2 -y
          apt install mariadb-server mariadb-client -y
          systemctl start mariadb
          # mysql_secure_installation
          # Enter current password for root (enter for none): calcio
          # Switch to unix_socket authentication [Y/n] y
          # Change the root password? [Y/n] n
          # Remove anonymous users? [Y/n] y
          # Disallow root login remotely? [Y/n] y
          # Remove test database and access to it? [Y/n] y
          # Reload privilege tables now? [Y/n] y
          apt-get install expect -y
          echo '''#!/bin/bash

          SECURE_MYSQL=$(expect -c "

          set timeout 10
          spawn mysql_secure_installation

          expect \"Enter current password for root (enter for none):\"
          send \"calcio\r\"

          expect \"Switch to unix_socket authentication\"
          send \"y\r\"

          expect \"Change the root password?\"
          send \"n\r\"

          expect \"Remove anonymous users?\"
          send \"y\r\"

          expect \"Disallow root login remotely?\"
          send \"y\r\"

          expect \"Remove test database and access to it?\"
          send \"y\r\"

          expect \"Reload privilege tables now?\"
          send \"y\r\"

          expect eof
          ")

          echo "$SECURE_MYSQL"
          ''' > ~/mysql_secure_installation_auto.sh
          bash mysql_secure_installation_auto.sh
          apt install php -y
          apt install wget -y
          wget https://wordpress.org/latest.tar.gz
          # wget https://wordpress.org/wordpress-6.0.3.tar.gz
          # !Sub https://wordpress.org/wordpress-${ExportVpcStackName}.tar.gz
          tar -xzvf latest.tar.gz
          cd wordpress
          mkdir -m 777 -p /var/www/html
          mv * /var/www/html/
          cd /var/www/html/
          rm -rf ~/wordpress
          rm -rf index.html
          sudo apt install php-mysql php-gd php-cgi php-cli -y
          systemctl restart apache2
          sudo chown -R www-data:www-data /var/www/html/wordpress
          # mysql -u root -p
          # Enter password: calcio
          echo '''#!/bin/bash

          expect -c "

          set timeout 10
          spawn mysql -u root -p

          expect \"Enter password:\"
          send \"calcio\r\"

          expect eof
          "
          ''' > ~/mysql_first.sh
          bash ~/mysql_first.sh | tee mysql_first.log
          create database wordpress;
          CREATE USER 'wordpressuser'@'%' IDENTIFIED BY 'password';
          GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpressuser'@'%';
          exit

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: MyAutoScalingGroup
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MaxSize: 2    
      MinSize: 2
      Tags: 
        - Key: Name
          PropagateAtLaunch: true
          Value: ec2-autoscaling
      TargetGroupARNs:
        - !Ref MyTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1

  ALBListenerNoSslCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect 
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP 

  ALBListenerSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
        - CertificateArn: !Ref AcmCertificate
      DefaultActions:
        - Type: forward 
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 443
      Protocol: HTTPS


# Outputs:
#   PublicIp:
#     Description: EC2 Instance Public Ip
#     Value: !GetAtt EC2Instance.PublicIp